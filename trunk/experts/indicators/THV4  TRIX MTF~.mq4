/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright ?2009, MissPips"
#property link      "http://www.cobraforex.com"

#property indicator_separate_window
#property indicator_minimum 1.0
#property indicator_maximum 4.0
#property indicator_buffers 8
#property indicator_color1 Red
#property indicator_color2 Blue
#property indicator_color3 Red
#property indicator_color4 Blue
#property indicator_color5 Red
#property indicator_color6 Blue
#property indicator_color7 Red
#property indicator_color8 Blue

extern int BarWidth = 0;
extern color BarColorUp = Green;
extern color BarColorDown = FireBrick;
extern color TextColor = Gray;
extern int P1_position = 4;
extern int P2_position = 3;
extern int P3_position = 2;
extern int P4_position = 1;
extern bool showlabels = TRUE;
extern string note1 = "when true picks next 2 higher tfs";
extern string note2 = "when false select your own tfs";
extern string note3 = "Period types: 0 = slow, 1 = fast";
extern bool autotimeframe = FALSE;
extern string note4 = "when true picks 2 additional  higher tfs";
extern bool EnableAlerts = FALSE;
extern bool SoundAlertOnOptimum = FALSE;
extern string OptimumSound = "email.wav";
extern bool useSecondAutoTF = FALSE;
extern int ePeriod1 = 1;
extern int ePeriod1Type = 1;
extern int ePeriod2 = 5;
extern int ePeriod2Type = 1;
extern int ePeriod3 = 5;
extern int ePeriod3Type = 0;
extern int ePeriod4 = 15;
extern int ePeriod4Type = 1;
extern string note5 = "Gap between the lines of bars";
extern double Gap = 0.6;
extern string note6 = "Label verticle shift";
extern double v_shift = 0.5;
extern string note7 = "Label horizontal shift";
extern int h_shift = 15;
extern bool showcomment = FALSE;
double g_ibuf_248[];
double g_ibuf_252[];
double g_ibuf_256[];
double g_ibuf_260[];
double g_ibuf_264[];
double g_ibuf_268[];
double g_ibuf_272[];
double g_ibuf_276[];
string gs_280 = "";
double g_icustom_288;
double g_icustom_296;
double g_icustom_304;
double g_icustom_312;
int gi_324 = 110;
int gi_328 = 228341;
int g_timeframe_332;
int g_timeframe_336;
int g_timeframe_340;
int g_timeframe_344;
int g_datetime_348;
string g_time2str_352;
bool gi_360 = FALSE;
bool gi_364 = FALSE;
bool gi_368 = FALSE;
bool gi_372 = FALSE;

int init() {
   g_datetime_348 = TimeLocal();
   g_time2str_352 = TimeToStr(g_datetime_348, TIME_SECONDS);
   Comment(g_datetime_348, " ", g_time2str_352);
   SetIndexStyle(0, DRAW_ARROW, STYLE_SOLID, BarWidth, BarColorUp);
   SetIndexArrow(0, gi_324);
   SetIndexBuffer(0, g_ibuf_272);
   SetIndexEmptyValue(0, 0.0);
   SetIndexStyle(1, DRAW_ARROW, STYLE_SOLID, BarWidth, BarColorDown);
   SetIndexArrow(1, gi_324);
   SetIndexBuffer(1, g_ibuf_276);
   SetIndexEmptyValue(1, 0.0);
   SetIndexStyle(2, DRAW_ARROW, STYLE_SOLID, BarWidth, BarColorUp);
   SetIndexArrow(2, gi_324);
   SetIndexBuffer(2, g_ibuf_264);
   SetIndexEmptyValue(2, 0.0);
   SetIndexStyle(3, DRAW_ARROW, STYLE_SOLID, BarWidth, BarColorDown);
   SetIndexArrow(3, gi_324);
   SetIndexBuffer(3, g_ibuf_268);
   SetIndexEmptyValue(3, 0.0);
   SetIndexStyle(4, DRAW_ARROW, STYLE_SOLID, BarWidth, BarColorUp);
   SetIndexArrow(4, gi_324);
   SetIndexBuffer(4, g_ibuf_256);
   SetIndexEmptyValue(4, 0.0);
   SetIndexStyle(5, DRAW_ARROW, STYLE_SOLID, BarWidth, BarColorDown);
   SetIndexArrow(5, gi_324);
   SetIndexBuffer(5, g_ibuf_260);
   SetIndexEmptyValue(5, 0.0);
   SetIndexStyle(6, DRAW_ARROW, STYLE_SOLID, BarWidth, BarColorUp);
   SetIndexArrow(6, gi_324);
   SetIndexBuffer(6, g_ibuf_248);
   SetIndexEmptyValue(6, 0.0);
   SetIndexStyle(7, DRAW_ARROW, STYLE_SOLID, BarWidth, BarColorDown);
   SetIndexArrow(7, gi_324);
   SetIndexBuffer(7, g_ibuf_252);
   SetIndexEmptyValue(7, 0.0);
   SetIndexLabel(0, "buf1_up");
   SetIndexLabel(1, "buf1_down");
   SetIndexLabel(2, "buf2_up");
   SetIndexLabel(3, "buf2_down");
   SetIndexLabel(4, "buf3_up");
   SetIndexLabel(5, "buf3_down");
   SetIndexLabel(6, "buf4_up");
   SetIndexLabel(7, "buf4_down");
   IndicatorDigits(0);
   getPeriod();
   gs_280 = g_time2str_352 + "THV4MFTrix V" + "6" + "." + "0" + "(" + g_timeframe_332 + "," + g_timeframe_336 + "," + g_timeframe_340 + "," + g_timeframe_344 + ")";
   IndicatorShortName(gs_280);
   return (0);
}

int deinit() {
   ObjectDelete("MTFtextMP" + gi_328);
   Comment("");
   return (0);
}

int start() {
   int lia_28[];
   int lia_32[];
   int lia_36[];
   int lia_40[];
   int li_60;
   int l_timeframe_64;
   ObjectCreate("MTFtextMP" + gi_328, OBJ_LABEL, WindowFind(gs_280), 0, 0);
   ObjectSetText("MTFtextMP" + gi_328, "MTF ?MissPips", 8, "Arial", DimGray);
   ObjectSet("MTFtextMP" + gi_328, OBJPROP_CORNER, 1);
   ObjectSet("MTFtextMP" + gi_328, OBJPROP_XDISTANCE, 115);
   ObjectSet("MTFtextMP" + gi_328, OBJPROP_YDISTANCE, 5);
   int l_ind_counted_0 = IndicatorCounted();
   if (l_ind_counted_0 < 0) return (-1);
   int li_4 = Bars - l_ind_counted_0;
   int li_16 = 0;
   double ld_unused_20 = Time[0] - Time[1];
   cleanLabel();
   placeLabels();
   li_16 = checkAlarm(g_ibuf_272[1], g_ibuf_276[1], g_ibuf_264[1], g_ibuf_268[1], g_ibuf_256[1], g_ibuf_260[1], g_ibuf_248[1], g_ibuf_252[1]);
   if (li_16 == 1) {
      if (EnableAlerts == TRUE) {
         if (SoundAlertOnOptimum == TRUE) PlaySound(OptimumSound);
         else DisplayAlert("Optimum trading conditions on: ");
      }
   }
   ArrayCopySeries(lia_40, 5, Symbol(), g_timeframe_332);
   ArrayCopySeries(lia_36, 5, Symbol(), g_timeframe_336);
   ArrayCopySeries(lia_32, 5, Symbol(), g_timeframe_340);
   ArrayCopySeries(lia_28, 5, Symbol(), g_timeframe_344);
   int l_index_44 = 0;
   int l_index_48 = 0;
   int l_index_52 = 0;
   int l_index_56 = 0;
   int l_index_8 = 0;
   l_index_44 = 0;
   l_index_48 = 0;
   l_index_52 = 0;
   l_index_56 = 0;
   while (l_index_8 < li_4) {
      if (Time[l_index_8] < lia_40[l_index_44]) l_index_44++;
      if (Time[l_index_8] < lia_36[l_index_48]) l_index_48++;
      if (Time[l_index_8] < lia_32[l_index_52]) l_index_52++;
      if (Time[l_index_8] < lia_28[l_index_56]) l_index_56++;
      for (int li_12 = 1; li_12 <= 4; li_12++) {
         switch (li_12) {
         case 1:
            l_timeframe_64 = g_timeframe_332;
            li_60 = l_index_44;
            break;
         case 2:
            l_timeframe_64 = g_timeframe_336;
            li_60 = l_index_48;
            break;
         case 3:
            l_timeframe_64 = g_timeframe_340;
            li_60 = l_index_52;
            break;
         case 4:
            l_timeframe_64 = g_timeframe_344;
            li_60 = l_index_56;
         }
         g_icustom_288 = iCustom(NULL, l_timeframe_64, "THV4 Trix called", 6, li_60);
         g_icustom_296 = iCustom(NULL, l_timeframe_64, "THV4 Trix called", 6, li_60 + 1);
         g_icustom_304 = iCustom(NULL, l_timeframe_64, "THV4 Trix called", 7, li_60);
         g_icustom_312 = iCustom(NULL, l_timeframe_64, "THV4 Trix called", 7, li_60 + 1);
         if (autotimeframe == TRUE) {
            switch (li_12) {
            case 1:
               g_ibuf_276[l_index_8] = EMPTY_VALUE;
               g_ibuf_272[l_index_8] = EMPTY_VALUE;
               if (g_icustom_288 < g_icustom_296) g_ibuf_276[l_index_8] = Gap * P1_position + 1.0;
               else g_ibuf_272[l_index_8] = Gap * P1_position + 1.0;
               break;
            case 2:
               g_ibuf_268[l_index_8] = EMPTY_VALUE;
               g_ibuf_264[l_index_8] = EMPTY_VALUE;
               if (g_icustom_304 < g_icustom_312) g_ibuf_268[l_index_8] = Gap * P2_position + 1.0;
               else g_ibuf_264[l_index_8] = Gap * P2_position + 1.0;
               break;
            case 3:
               g_ibuf_260[l_index_8] = EMPTY_VALUE;
               g_ibuf_256[l_index_8] = EMPTY_VALUE;
               if (g_icustom_288 < g_icustom_296) g_ibuf_260[l_index_8] = Gap * P3_position + 1.0;
               else g_ibuf_256[l_index_8] = Gap * P3_position + 1.0;
               break;
            case 4:
               g_ibuf_252[l_index_8] = EMPTY_VALUE;
               g_ibuf_248[l_index_8] = EMPTY_VALUE;
               if (g_icustom_304 < g_icustom_312) g_ibuf_252[l_index_8] = Gap * P4_position + 1.0;
               else g_ibuf_248[l_index_8] = Gap * P4_position + 1.0;
            }
         } else {
            if (autotimeframe == FALSE) {
               switch (li_12) {
               case 1:
                  g_ibuf_276[l_index_8] = EMPTY_VALUE;
                  g_ibuf_272[l_index_8] = EMPTY_VALUE;
                  if (ePeriod1Type == 0) {
                     if (g_icustom_304 < g_icustom_312) g_ibuf_276[l_index_8] = Gap * P1_position + 1.0;
                     else g_ibuf_272[l_index_8] = Gap * P1_position + 1.0;
                  }
                  if (ePeriod1Type == 1) {
                     if (g_icustom_288 < g_icustom_296) g_ibuf_276[l_index_8] = Gap * P1_position + 1.0;
                     else g_ibuf_272[l_index_8] = Gap * P1_position + 1.0;
                  }
                  break;
               case 2:
                  g_ibuf_268[l_index_8] = EMPTY_VALUE;
                  g_ibuf_264[l_index_8] = EMPTY_VALUE;
                  if (ePeriod2Type == 0) {
                     if (g_icustom_304 < g_icustom_312) g_ibuf_268[l_index_8] = Gap * P2_position + 1.0;
                     else g_ibuf_264[l_index_8] = Gap * P2_position + 1.0;
                  }
                  if (ePeriod2Type == 1) {
                     if (g_icustom_288 < g_icustom_296) g_ibuf_268[l_index_8] = Gap * P2_position + 1.0;
                     else g_ibuf_264[l_index_8] = Gap * P2_position + 1.0;
                  }
                  break;
               case 3:
                  g_ibuf_260[l_index_8] = EMPTY_VALUE;
                  g_ibuf_256[l_index_8] = EMPTY_VALUE;
                  if (ePeriod3Type == 0) {
                     if (g_icustom_304 < g_icustom_312) g_ibuf_260[l_index_8] = Gap * P3_position + 1.0;
                     else g_ibuf_256[l_index_8] = Gap * P3_position + 1.0;
                  }
                  if (ePeriod3Type == 1) {
                     if (g_icustom_288 < g_icustom_296) g_ibuf_260[l_index_8] = Gap * P3_position + 1.0;
                     else g_ibuf_256[l_index_8] = Gap * P3_position + 1.0;
                  }
                  break;
               case 4:
                  g_ibuf_252[l_index_8] = EMPTY_VALUE;
                  g_ibuf_248[l_index_8] = EMPTY_VALUE;
                  if (ePeriod4Type == 0) {
                     if (g_icustom_304 < g_icustom_312) g_ibuf_252[l_index_8] = Gap * P4_position + 1.0;
                     else g_ibuf_248[l_index_8] = Gap * P4_position + 1.0;
                  }
                  if (ePeriod4Type == 1) {
                     if (g_icustom_288 < g_icustom_296) g_ibuf_252[l_index_8] = Gap * P4_position + 1.0;
                     else g_ibuf_248[l_index_8] = Gap * P4_position + 1.0;
                  }
               }
            }
         }
      }
      l_index_8++;
   }
   return (0);
}

void getPeriod() {
   if (autotimeframe) {
      if (useSecondAutoTF == TRUE) {
         switch (Period()) {
         case PERIOD_M1:
            g_timeframe_332 = 30;
            g_timeframe_336 = 30;
            g_timeframe_340 = 60;
            g_timeframe_344 = 60;
            return;
         case PERIOD_M5:
            g_timeframe_332 = 60;
            g_timeframe_336 = 60;
            g_timeframe_340 = 240;
            g_timeframe_344 = 240;
            return;
         case PERIOD_M15:
            g_timeframe_332 = 240;
            g_timeframe_336 = 240;
            g_timeframe_340 = 1440;
            g_timeframe_344 = 1440;
            return;
         case PERIOD_M30:
            g_timeframe_332 = 1440;
            g_timeframe_336 = 1440;
            g_timeframe_340 = 10080;
            g_timeframe_344 = 10080;
            return;
         case PERIOD_H1:
            g_timeframe_332 = 10080;
            g_timeframe_336 = 10080;
            g_timeframe_340 = 43200;
            g_timeframe_344 = 43200;
            return;
         case PERIOD_H4:
            g_timeframe_332 = 1440;
            g_timeframe_336 = 1440;
            g_timeframe_340 = 10080;
            g_timeframe_344 = 10080;
            return;
         case PERIOD_D1:
            g_timeframe_332 = 10080;
            g_timeframe_336 = 10080;
            g_timeframe_340 = 43200;
            g_timeframe_344 = 43200;
            return;
         case PERIOD_W1:
            g_timeframe_332 = 43200;
            g_timeframe_336 = 43200;
            g_timeframe_340 = 43200;
            g_timeframe_344 = 43200;
            return;
         case PERIOD_MN1:
            g_timeframe_332 = 43200;
            g_timeframe_336 = 43200;
            g_timeframe_340 = 43200;
            g_timeframe_344 = 43200;
            return;
         }
      }
      switch (Period()) {
      case PERIOD_M1:
         g_timeframe_332 = 5;
         g_timeframe_336 = 5;
         g_timeframe_340 = 15;
         g_timeframe_344 = 15;
         return;
      case PERIOD_M5:
         g_timeframe_332 = 15;
         g_timeframe_336 = 15;
         g_timeframe_340 = 30;
         g_timeframe_344 = 30;
         return;
      case PERIOD_M15:
         g_timeframe_332 = 30;
         g_timeframe_336 = 30;
         g_timeframe_340 = 60;
         g_timeframe_344 = 60;
         return;
      case PERIOD_M30:
         g_timeframe_332 = 60;
         g_timeframe_336 = 60;
         g_timeframe_340 = 240;
         g_timeframe_344 = 240;
         return;
      case PERIOD_H1:
         g_timeframe_332 = 240;
         g_timeframe_336 = 240;
         g_timeframe_340 = 1440;
         g_timeframe_344 = 1440;
         return;
      case PERIOD_H4:
         g_timeframe_332 = 1440;
         g_timeframe_336 = 1440;
         g_timeframe_340 = 10080;
         g_timeframe_344 = 10080;
         return;
      case PERIOD_D1:
         g_timeframe_332 = 10080;
         g_timeframe_336 = 10080;
         g_timeframe_340 = 43200;
         g_timeframe_344 = 43200;
         return;
      case PERIOD_W1:
         g_timeframe_332 = 43200;
         g_timeframe_336 = 43200;
         g_timeframe_340 = 43200;
         g_timeframe_344 = 43200;
         return;
      case PERIOD_MN1:
         g_timeframe_332 = 43200;
         g_timeframe_336 = 43200;
         g_timeframe_340 = 43200;
         g_timeframe_344 = 43200;
         return;
      }
   }
   string ls_8 = "Invalid timeframe. Please enter a valid timeframe";
   if (validateInput(ePeriod1) == 0) Alert(ls_8);
   else g_timeframe_332 = ePeriod1;
   if (validateInput(ePeriod2) == 0) Alert(ls_8);
   else g_timeframe_336 = ePeriod2;
   if (validateInput(ePeriod3) == 0) Alert(ls_8);
   else g_timeframe_340 = ePeriod3;
   if (validateInput(ePeriod4) == 0) {
      Alert(ls_8);
      return;
   }
   g_timeframe_344 = ePeriod4;
}

string getType(int ai_0) {
   string ls_ret_4;
   if (ai_0 == 0) ls_ret_4 = " slow";
   else
      if (ai_0 == 1) ls_ret_4 = " fast";
   return (ls_ret_4);
}

string tf2txt(int ai_0) {
   if (ai_0 == 1) return ("M1");
   if (ai_0 == 5) return ("M5");
   if (ai_0 == 15) return ("M15");
   if (ai_0 == 30) return ("M30");
   if (ai_0 == 60) return ("H1");
   if (ai_0 == 240) return ("H4");
   if (ai_0 == 1440) return ("D1");
   if (ai_0 == 10080) return ("W1");
   if (ai_0 == 43200) return ("MN");
   return ("??");
}

int validateInput(int ai_0) {
   bool li_ret_4 = FALSE;
   switch (ai_0) {
   case 1:
      li_ret_4 = TRUE;
      break;
   case 5:
      li_ret_4 = TRUE;
      break;
   case 15:
      li_ret_4 = TRUE;
      break;
   case 30:
      li_ret_4 = TRUE;
      break;
   case 1:
      li_ret_4 = TRUE;
      break;
   case 60:
      li_ret_4 = TRUE;
      break;
   case 240:
      li_ret_4 = TRUE;
      break;
   case 1440:
      li_ret_4 = TRUE;
      break;
   case 10080:
      li_ret_4 = TRUE;
      break;
   case 43200:
      li_ret_4 = TRUE;
   }
   return (li_ret_4);
}

int placeLabels() {
   string l_text_12;
   double l_price_20;
   string l_name_36;
   double ld_0 = Time[0] - Time[1];
   if (showlabels == TRUE) {
      for (int li_8 = 1; li_8 <= 4; li_8++) {
         l_text_12 = "??";
         if (autotimeframe == TRUE) {
            switch (li_8) {
            case 1:
               l_text_12 = tf2txt(g_timeframe_332) + " f";
               l_price_20 = Gap * P1_position + 1.0 + v_shift;
               break;
            case 2:
               l_text_12 = tf2txt(g_timeframe_336);
               l_price_20 = Gap * P2_position + 1.0 + v_shift;
               break;
            case 3:
               l_text_12 = tf2txt(g_timeframe_340) + " f";
               l_price_20 = Gap * P3_position + 1.0 + v_shift;
               break;
            case 4:
               l_text_12 = tf2txt(g_timeframe_344);
               l_price_20 = Gap * P4_position + 1.0 + v_shift;
            }
         } else {
            if (autotimeframe == FALSE) {
               switch (li_8) {
               case 1:
                  l_text_12 = tf2txt(g_timeframe_332) + getType(ePeriod1Type);
                  l_price_20 = Gap * P1_position + 1.0 + v_shift;
                  break;
               case 2:
                  l_text_12 = tf2txt(g_timeframe_336) + getType(ePeriod2Type);
                  l_price_20 = Gap * P2_position + 1.0 + v_shift;
                  break;
               case 3:
                  l_text_12 = tf2txt(g_timeframe_340) + getType(ePeriod3Type);
                  l_price_20 = Gap * P3_position + 1.0 + v_shift;
                  break;
               case 4:
                  l_text_12 = tf2txt(g_timeframe_344) + getType(ePeriod4Type);
                  l_price_20 = Gap * P4_position + 1.0 + v_shift;
               }
            }
         }
         l_name_36 = WindowFind(gs_280) + "FF_" + gi_328 + "_" + li_8 + "_" + l_text_12;
         ObjectCreate(l_name_36, OBJ_TEXT, WindowFind(gs_280), iTime(NULL, 0, 0) + ld_0 * h_shift, l_price_20);
         ObjectSetText(l_name_36, l_text_12, 7, "Arial", TextColor);
      }
   }
   return (0);
}

int cleanLabel() {
   for (int li_0 = ObjectsTotal() - 1; li_0 > -1; li_0--)
      if (StringFind(ObjectName(li_0), WindowFind(gs_280) + "FF_" + gi_328 + "_") >= 0) ObjectDelete(ObjectName(li_0));
   return (0);
}

int checkAlarm(double ad_0, double ad_8, double ad_16, double ad_24, double ad_32, double ad_40, double ad_48, double ad_56) {
   double ld_72 = ad_0;
   double ld_80 = ad_16;
   double ld_88 = ad_32;
   double ld_96 = ad_48;
   double ld_104 = ad_8;
   double ld_112 = ad_24;
   double ld_120 = ad_40;
   double ld_128 = ad_56;
   string ls_64 = "before if soundUpAlarmOld= " + gi_360 + " soundUpAlarmNew= " + gi_368 + " soundDownAlarmOld= " + gi_364 + " soundDownAlarmNew= " + gi_372 
      + "\n" 
      + "B1UpIsEmpty= " + ld_72 + " B2UpIsEmpty= " + ld_80 + " B3UpIsEmpty= " + ld_88 + " B4UpIsEmpty= " + ld_96 
      + "\n" 
   + " B1DownIsEmpty= " + ld_104 + " B2DownIsEmpty= " + ld_112 + " B3DownIsEmpty= " + ld_120 + " B4DownIsEmpty= " + ld_128;
   if (showcomment == TRUE) Comment(ls_64);
   if (ld_72 != EMPTY_VALUE && ld_80 != EMPTY_VALUE && ld_88 != EMPTY_VALUE && ld_96 != EMPTY_VALUE) {
      gi_368 = TRUE;
      if (gi_360 != gi_368) {
         gi_360 = gi_368;
         gi_364 = FALSE;
         gi_372 = FALSE;
         ls_64 = "In first if soundUpAlarmOld= " + gi_360 + " soundUpAlarmNew= " + gi_368 + " soundDownAlarmOld= " + gi_364 + " soundDownAlarmNew= " + gi_372 
            + "\n" 
            + "B1UpIsEmpty= " + ld_72 + " B2UpIsEmpty= " + ld_80 + " B3UpIsEmpty= " + ld_88 + " B4UpIsEmpty= " + ld_96 
            + "\n" 
         + " B1DownIsEmpty= " + ld_104 + " B2DownIsEmpty= " + ld_112 + " B3DownIsEmpty= " + ld_120 + " B4DownIsEmpty= " + ld_128;
         if (showcomment == TRUE) Comment(ls_64);
         return (gi_368);
      }
      return (0);
   }
   if (ld_104 != EMPTY_VALUE && ld_112 != EMPTY_VALUE && ld_120 != EMPTY_VALUE && ld_128 != EMPTY_VALUE) {
      gi_372 = TRUE;
      if (gi_364 != gi_372) {
         gi_364 = gi_372;
         gi_360 = FALSE;
         gi_368 = FALSE;
         ls_64 = "In second if soundUpAlarmOld= " + gi_360 + " soundUpAlarmNew= " + gi_368 + " soundDownAlarmOld= " + gi_364 + " soundDownAlarmNew= " + gi_372 
            + "\n" 
            + "B1UpIsEmpty= " + ld_72 + " B2UpIsEmpty= " + ld_80 + " B3UpIsEmpty= " + ld_88 + " B4UpIsEmpty= " + ld_96 
            + "\n" 
         + " B1DownIsEmpty= " + ld_104 + " B2DownIsEmpty= " + ld_112 + " B3DownIsEmpty= " + ld_120 + " B4DownIsEmpty= " + ld_128;
         if (showcomment == TRUE) Comment(ls_64);
         return (gi_372);
      }
      return (0);
   }
   gi_360 = FALSE;
   gi_364 = FALSE;
   gi_368 = FALSE;
   gi_372 = FALSE;
   return (0);
}

void DisplayAlert(string as_0) {
   string ls_unused_8;
   Alert(as_0, Symbol(), " , ", tf2txt(Period()), " minutes chart");
}
